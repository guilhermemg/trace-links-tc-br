import pandas as pd

from enum import Enum

from modules.utils import firefox_dataset_p2 as fd

class HandlerMode(Enum):
    CREATE = 'CREATE',
    LOAD = 'LOAD'

class BR_Feat_Final_Matrix_Handler:
    
    def __init__(self, mode):
        self.bugreports = fd.Datasets.read_selected_bugreports_df()
        self.features = fd.Datasets.read_features_df()
        self.br_2_features_matrix_final = None
        
        self.setup_br_2_features_matrix_final(mode)
                    
    def setup_br_2_features_matrix_final(self, mode):
        
        if mode == HandlerMode.CREATE:
            self.br_2_features_matrix_final = pd.DataFrame()
            self.br_2_features_matrix_final['Bug_Number'] = self.bugreports.Bug_Number
            self.br_2_features_matrix_final['bug_title'] = self.br_2_features_matrix_final.apply(lambda row : self.bugreports[self.bugreports.Bug_Number == int(row.Bug_Number)].Summary.values[0], axis=1)
        
        elif mode == HandlerMode.LOAD:
            self.br_2_features_matrix_final = fd.Feat_BR_Oracles.read_br_2_features_matrix_final_df()
    
    def __get_features(self, br_id, trace_matrix, is_from_model):
        features_ids = ""
        
        matrix = trace_matrix
        if is_from_model:
            matrix = trace_matrix.T
        
        for col in matrix.columns:
            if matrix.at[br_id, col] == 1:
                if features_ids == "":
                    features_ids = str(matrix.columns.get_loc(col) + 1)
                else:
                    features_ids = features_ids + " " + str(matrix.columns.get_loc(col) + 1)
        
        return features_ids

    
    ## Add new columns to br_2_features_matrix_final
    ##  - columns_names: list of names of new columns
    ##  - trace_matrices: list of matrices of traces (Feat x BR)
    ##  - is_from_model: indicates if the trace_matrices are generated by an IR model
    def add_mappings_1(self, columns_names, trace_matrices, is_from_model):
        for col_name,trace_matrix in zip(columns_names,trace_matrices):
            self.br_2_features_matrix_final[col_name] = list(self.bugreports.apply(lambda row : self.__get_features(row['Bug_Number'], trace_matrix, is_from_model), axis=1))
        
        self.br_2_features_matrix_final.replace(" ", "", inplace=True)
        
        return self.br_2_features_matrix_final
    
    ## Add new columns to br_2_features_matrix_final with the features shortnames from the respective orig_column of features IDs
    ## to the respective dest_column
    def add_mappings_2(self, dest_columns_names, orig_columns_names):
        for dest_col,orig_col in zip(dest_columns_names, orig_columns_names):
            self.br_2_features_matrix_final[dest_col] = self.br_2_features_matrix_final[orig_col].apply(lambda row : [self.features[self.features.Feature_Number == int(f_id)].Feature_Shortname for f_id in row.split(" ") if f_id != ""])
        return self.br_2_features_matrix_final
    
    def save_br_feat_final_matrix(self):
        fd.Feat_BR_Oracles.write_br_2_features_matrix_final_df(self.br_2_features_matrix_final)